server:
    contextPath: /car-service
    port: 8084

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
      
# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 8899
    contextPath: authserver

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
security:
  oauth2:
    resource: 
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
      preferTokenInfo: false 
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: test-oauth-server-showcase-authorization-code
      secret: our-secret

appverse: 
  frontfacade:
    oauth2:
      jwt:
        jks:
          keystore: oauth-jwt-example-keystore.jks
          password: guessThis
          key: oauth-jwt-example      
      
---
# task-webservice instance when used on Docker
spring:
  profiles: docker
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://registry:8761/eureka/
      
# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: oauth
    port: 8899
    contextPath: authserver
    
# Define the port where the API gateway server would be running. This could always be port 8080
# since each docker container has it's own IP
server:
  port: 8080